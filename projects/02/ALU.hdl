// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not(in=zx, out=notzx);
   And16(a=x, b[0..15]=notzx, out=zxx);

   Xor(a=zxx[0], b=nx, out=nxx[0]);
   Xor(a=zxx[1], b=nx, out=nxx[1]);
   Xor(a=zxx[2], b=nx, out=nxx[2]);
   Xor(a=zxx[3], b=nx, out=nxx[3]);
   Xor(a=zxx[4], b=nx, out=nxx[4]);
   Xor(a=zxx[5], b=nx, out=nxx[5]);
   Xor(a=zxx[6], b=nx, out=nxx[6]);
   Xor(a=zxx[7], b=nx, out=nxx[7]);
   Xor(a=zxx[8], b=nx, out=nxx[8]);
   Xor(a=zxx[9], b=nx, out=nxx[9]);
   Xor(a=zxx[10], b=nx, out=nxx[10]);
   Xor(a=zxx[11], b=nx, out=nxx[11]);
   Xor(a=zxx[12], b=nx, out=nxx[12]);
   Xor(a=zxx[15], b=nx, out=nxx[15]);
   Xor(a=zxx[13], b=nx, out=nxx[13]);
   Xor(a=zxx[14], b=nx, out=nxx[14]);
   
   Not(in=zy, out=notzy);
   And16(a=y, b[0..15]=notzy, out=zyy);

   Xor(a=zyy[0], b=ny, out=nyy[0]);
   Xor(a=zyy[1], b=ny, out=nyy[1]);
   Xor(a=zyy[2], b=ny, out=nyy[2]);
   Xor(a=zyy[3], b=ny, out=nyy[3]);
   Xor(a=zyy[4], b=ny, out=nyy[4]);
   Xor(a=zyy[5], b=ny, out=nyy[5]);
   Xor(a=zyy[6], b=ny, out=nyy[6]);
   Xor(a=zyy[7], b=ny, out=nyy[7]);
   Xor(a=zyy[8], b=ny, out=nyy[8]);
   Xor(a=zyy[9], b=ny, out=nyy[9]);
   Xor(a=zyy[10], b=ny, out=nyy[10]);
   Xor(a=zyy[11], b=ny, out=nyy[11]);
   Xor(a=zyy[12], b=ny, out=nyy[12]);
   Xor(a=zyy[15], b=ny, out=nyy[15]);
   Xor(a=zyy[13], b=ny, out=nyy[13]);
   Xor(a=zyy[14], b=ny, out=nyy[14]);
   
}